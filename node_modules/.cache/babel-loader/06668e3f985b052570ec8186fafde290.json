{"ast":null,"code":"var _jsxFileName = \"/Users/ramprasathmeganathan/Documents/AdvancedWeb/WebAssignment2/webassignment2/src/components/Slider/Slider.js\";\n\n/** @jsx jsx */\nimport React, { useState, useEffect, useRef } from 'react';\nimport { css, jsx } from '@emotion/core';\nimport SliderContent from './SliderContent';\nimport Slide from './Slide';\nimport ArrowIcons from './ArrowIcons';\nimport dots from './DotIcons';\n\nconst getWindowWidth = () => window.innerWidth;\n/**\n* @function Slider\n*/\n\n\nconst Slider = props => {\n  const {\n    slides\n  } = props;\n  const firstSlide = slides[0];\n  const secondSlide = slides[1];\n  const lastSlide = slides[slides.length - 1];\n  const [state, setState] = useState({\n    activeSlide: 0,\n    translate: getWindowWidth(),\n    transition: 0.45,\n    _slides: [lastSlide, firstSlide, secondSlide]\n  });\n  const {\n    currentSlide,\n    translate,\n    _slides,\n    transition\n  } = state;\n  const autoPlayRef = useRef();\n  const transitionRef = useRef();\n  const resizeRef = useRef();\n  useEffect(() => {\n    autoPlayRef.current = nextSlide;\n    transitionRef.current = smoothTransition;\n    resizeRef.current = handleResize;\n  });\n  useEffect(() => {\n    const play = () => {\n      autoPlayRef.current();\n    };\n\n    const smooth = e => {\n      if (e.target.className.includes('SliderContent')) {\n        transitionRef.current();\n      }\n    };\n\n    const resize = () => {\n      resizeRef.current();\n    };\n\n    const interval = setInterval(play, props.autoPlay * 1000);\n    const transitionEnd = window.addEventListener('transitionend', smooth);\n    const onResize = window.addEventListener('resize', resize);\n    return () => {\n      clearInterval(interval);\n      window.removeEventListener('transitionend', transitionEnd);\n      window.removeEventListener('resize', onResize);\n    };\n  }, []);\n  useEffect(() => {\n    if (transition === 0) setState({ ...state,\n      transition: 0.45\n    });\n  }, [transition]);\n\n  const handleResize = () => {\n    setState({ ...state,\n      translate: getWindowWidth(),\n      transition: 0\n    });\n  };\n\n  const smoothTransition = () => {\n    let _slides = [];\n    if (activeSlide === slides.length - 1) _slides = [slides[slides.length - 2], lastSlide, firstSlide];else if (currentSlide === 0) _slides = [lastSlide, firstSlide, secondSlide];else _slides = slides.slice(currentSlide - 1, currentSlide + 2);\n    setState({ ...state,\n      _slides,\n      transition: 0,\n      translate: getWindowWidth()\n    });\n  };\n\n  const nextSlide = () => setState({ ...state,\n    translate: translate + getWindowWidth(),\n    activeSlide: currentSlide === slides.length - 1 ? 0 : currentSlide + 1\n  });\n\n  const prevSlide = () => setState({ ...state,\n    translate: 0,\n    activeSlide: currentSlide === 0 ? slides.length - 1 : activeSlide - 1\n  });\n\n  return jsx(\"div\", {\n    css: SliderCSS,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 3\n    }\n  }, jsx(SliderContent, {\n    translate: translate,\n    transition: transition,\n    width: getWindowWidth() * _slides.length,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, _slides.map((_slide, i) => jsx(Slide, {\n    width: getWindowWidth(),\n    key: _slide + i,\n    content: _slide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }))), jsx(ArrowIcons, {\n    direction: \"left\",\n    handleClick: prevSlide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }), jsx(ArrowIcons, {\n    direction: \"right\",\n    handleClick: nextSlide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }), jsx(\"dots\", {\n    slides: slides,\n    activeSlide: activeSlide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }));\n};\n\nconst SliderCSS = css`\nposition: relative;\nheight: 60vh;\nwidth: 100vw;\nmargin: 0 auto;\noverflow: hidden;\nwhite-space: nowrap;\n`;\nexport default Slider;","map":{"version":3,"sources":["/Users/ramprasathmeganathan/Documents/AdvancedWeb/WebAssignment2/webassignment2/src/components/Slider/Slider.js"],"names":["React","useState","useEffect","useRef","css","jsx","SliderContent","Slide","ArrowIcons","dots","getWindowWidth","window","innerWidth","Slider","props","slides","firstSlide","secondSlide","lastSlide","length","state","setState","activeSlide","translate","transition","_slides","currentSlide","autoPlayRef","transitionRef","resizeRef","current","nextSlide","smoothTransition","handleResize","play","smooth","e","target","className","includes","resize","interval","setInterval","autoPlay","transitionEnd","addEventListener","onResize","clearInterval","removeEventListener","slice","prevSlide","SliderCSS","map","_slide","i"],"mappings":"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","sourcesContent":["/** @jsx jsx */\nimport React, { useState, useEffect, useRef } from 'react'\nimport { css, jsx } from '@emotion/core'\nimport SliderContent from './SliderContent'\nimport Slide from './Slide'\nimport ArrowIcons from './ArrowIcons'\nimport dots from './DotIcons'\n\nconst getWindowWidth = () => window.innerWidth\n\n/**\n* @function Slider\n*/\nconst Slider = props => {\nconst { slides } = props\n\nconst firstSlide = slides[0]\nconst secondSlide = slides[1]\nconst lastSlide = slides[slides.length - 1]\n\nconst [state, setState] = useState({\n  activeSlide: 0,\n  translate: getWindowWidth(),\n  transition: 0.45,\n  _slides: [lastSlide, firstSlide, secondSlide]\n})\n\nconst { currentSlide, translate, _slides, transition } = state\n\nconst autoPlayRef = useRef()\nconst transitionRef = useRef()\nconst resizeRef = useRef()\n\nuseEffect(() => {\n  autoPlayRef.current = nextSlide\n  transitionRef.current = smoothTransition\n  resizeRef.current = handleResize\n})\n\nuseEffect(() => {\n  const play = () => {\n    autoPlayRef.current()\n  }\n\n  const smooth = e => {\n    if (e.target.className.includes('SliderContent')) {\n      transitionRef.current()\n    }\n  }\n\n  const resize = () => {\n    resizeRef.current()\n  }\n\n  const interval = setInterval(play, props.autoPlay * 1000)\n  const transitionEnd = window.addEventListener('transitionend', smooth)\n  const onResize = window.addEventListener('resize', resize)\n\n  return () => {\n    clearInterval(interval)\n    window.removeEventListener('transitionend', transitionEnd)\n    window.removeEventListener('resize', onResize)\n  }\n}, [])\n\nuseEffect(() => {\n  if (transition === 0) setState({ ...state, transition: 0.45 })\n}, [transition])\n\nconst handleResize = () => {\n  setState({ ...state, translate: getWindowWidth(), transition: 0 })\n}\n\nconst smoothTransition = () => {\n  let _slides = []\n  if (activeSlide === slides.length - 1)\n    _slides = [slides[slides.length - 2], lastSlide, firstSlide]\n  else if (currentSlide === 0) _slides = [lastSlide, firstSlide, secondSlide]\n  else _slides = slides.slice(currentSlide - 1, currentSlide + 2)\n\n  setState({\n    ...state,\n    _slides,\n    transition: 0,\n    translate: getWindowWidth()\n  })\n}\n\nconst nextSlide = () =>\n  setState({\n    ...state,\n    translate: translate + getWindowWidth(),\n    activeSlide: currentSlide === slides.length - 1 ? 0 : currentSlide + 1\n  })\n\nconst prevSlide = () =>\n  setState({\n    ...state,\n    translate: 0,\n    activeSlide: currentSlide === 0 ? slides.length - 1 : activeSlide - 1\n  })\n\nreturn (\n  <div css={SliderCSS}>\n    <SliderContent\n      translate={translate}\n      transition={transition}\n      width={getWindowWidth() * _slides.length}  >\n      {_slides.map((_slide, i) => (\n        <Slide width={getWindowWidth()} key={_slide + i} content={_slide} />\n      ))}\n    </SliderContent>\n\n    <ArrowIcons direction=\"left\" handleClick={prevSlide} />\n    <ArrowIcons direction=\"right\" handleClick={nextSlide} />\n\n    <dots slides={slides} activeSlide={activeSlide} />\n  </div>\n)\n}\n\nconst SliderCSS = css`\nposition: relative;\nheight: 60vh;\nwidth: 100vw;\nmargin: 0 auto;\noverflow: hidden;\nwhite-space: nowrap;\n`\n\nexport default Slider"]},"metadata":{},"sourceType":"module"}