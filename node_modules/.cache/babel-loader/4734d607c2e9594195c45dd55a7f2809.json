{"ast":null,"code":"var _jsxFileName = \"/Users/ramprasathmeganathan/Documents/AdvancedWeb/WebAssignment2/webassignment2/src/components/Slider.js\";\n\n/** @jsx jsx */\nimport React, { useState, useEffect, useRef } from 'react';\nimport { css, jsx } from '@emotion/core';\nimport SliderContent from './SliderContent';\nimport Slide from './Slide';\nimport Arrow from './Arrow';\nimport Dots from './Dots';\nimport { act } from 'react-dom/test-utils';\n/**\n * @function Slider\n */\n\nconst Slider = props => {\n  const getWidth = () => window.innerWidth;\n\n  const [state, setState] = useState({\n    activeIndex: 0,\n    translate: 0,\n    transition: 0.45\n  });\n  const autoPlayRef = useRef();\n  const transitionRef = useRef();\n  const {\n    activeSlide,\n    translate,\n    _slides,\n    transition\n  } = state;\n  useEffect(() => {\n    autoPlayRef.current = nextSlide;\n  });\n  useEffect(() => {\n    const play = () => {\n      autoPlayRef.current();\n    };\n\n    const smooth = () => {\n      transitionRef.current();\n    };\n\n    const interval = setInterval(play, props.autoPlay * 1000);\n    const transitionEnd = window.addEventListener('transitionend', smooth);\n    return () => {\n      clearInterval(interval);\n      window.removeEventListener('transitionend', transitionEnd);\n      window.removeEventListener('resize', onResize);\n    };\n  }, []); // const { translate, transition, activeIndex } = state\n\n  const nextSlide = () => {\n    if (activeIndex === props.slides.length - 1) {\n      return setState({ ...state,\n        translate: 0,\n        activeIndex: 0\n      });\n    }\n\n    setState({ ...state,\n      activeIndex: activeIndex + 1,\n      translate: (activeIndex + 1) * getWidth()\n    });\n  };\n\n  const prevSlide = () => {\n    if (activeIndex === 0) {\n      return setState({ ...state,\n        translate: (props.slides.length - 1) * getWidth(),\n        activeIndex: props.slides.length - 1\n      });\n    }\n\n    setState({ ...state,\n      activeIndex: activeIndex - 1,\n      translate: (activeIndex - 1) * getWidth()\n    });\n  };\n\n  const smoothTransition = () => {\n    let _slides = []; // We're at the last slide.\n\n    if (activeSlide === slides.length - 1) _slides = [slides[slides.length - 2], lastSlide, firstSlide]; // We're back at the first slide. Just reset to how it was on initial render\n    else if (activeSlide === 0) _slides = [lastSlide, firstSlide, secondSlide]; // Create an array of the previous last slide, and the next two slides that follow it.\n      else _slides = slides.slice(activeSlide - 1, activeSlide + 2);\n    setState({ ...state,\n      _slides,\n      transition: 0,\n      translate: getWidth()\n    });\n  };\n\n  return jsx(\"div\", {\n    css: SliderCSS,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, jsx(SliderContent, {\n    translate: translate,\n    transition: transition,\n    width: getWidth() * props.slides.length,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, props.slides.map((slide, i) => jsx(Slide, {\n    key: slide + i,\n    content: slide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }))), jsx(Arrow, {\n    direction: \"left\",\n    handleClick: prevSlide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }), jsx(Arrow, {\n    direction: \"right\",\n    handleClick: nextSlide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }), jsx(Dots, {\n    slides: props.slides,\n    activeIndex: activeIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst SliderCSS = css`\n  position: relative;\n  height: 60vh;\n  width: 85vw;\n  margin: 0 auto;\n  overflow: hidden;\n`;\nexport default Slider;","map":{"version":3,"sources":["/Users/ramprasathmeganathan/Documents/AdvancedWeb/WebAssignment2/webassignment2/src/components/Slider.js"],"names":["React","useState","useEffect","useRef","css","jsx","SliderContent","Slide","Arrow","Dots","act","Slider","props","getWidth","window","innerWidth","state","setState","activeIndex","translate","transition","autoPlayRef","transitionRef","activeSlide","_slides","current","nextSlide","play","smooth","interval","setInterval","autoPlay","transitionEnd","addEventListener","clearInterval","removeEventListener","onResize","slides","length","prevSlide","smoothTransition","lastSlide","firstSlide","secondSlide","slice","SliderCSS","map","slide","i"],"mappings":"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","sourcesContent":["\n/** @jsx jsx */\nimport React, { useState, useEffect, useRef } from 'react'\nimport { css, jsx } from '@emotion/core'\nimport SliderContent from './SliderContent'\nimport Slide from './Slide'\nimport Arrow from './Arrow'\nimport Dots from './Dots'\nimport { act } from 'react-dom/test-utils'\n\n/**\n * @function Slider\n */\nconst Slider = props => {\n  const getWidth = () => window.innerWidth\n\n  const [state, setState] = useState({\n    activeIndex: 0,\n    translate: 0,\n    transition: 0.45\n  })\n  const autoPlayRef = useRef()\n  const transitionRef = useRef()\n  const { activeSlide, translate, _slides, transition } = state\n\n  useEffect(() => {\n    autoPlayRef.current = nextSlide\n  })\n\n  useEffect(() => {\n    const play = () => {\n      autoPlayRef.current()\n    }\n    const smooth = () => {\n      transitionRef.current()\n    }\n\n    const interval = setInterval(play, props.autoPlay * 1000)\n    const transitionEnd = window.addEventListener('transitionend', smooth)\n    return () => {clearInterval(interval)\n    window.removeEventListener('transitionend', transitionEnd) \n    window.removeEventListener('resize', onResize) }\n  }, [])\n\n  // const { translate, transition, activeIndex } = state\n  \n\n  const nextSlide = () => {\n    if (activeIndex === props.slides.length - 1) {\n      return setState({\n        ...state,\n        translate: 0,\n        activeIndex: 0\n      })\n    }\n    \n\n    setState({\n      ...state,\n      activeIndex: activeIndex + 1,\n      translate: (activeIndex + 1) * getWidth()\n    })\n  }\n\n  const prevSlide = () => {\n    if (activeIndex === 0) {\n      return setState({\n        ...state,\n        translate: (props.slides.length - 1) * getWidth(),\n        activeIndex: props.slides.length - 1\n      })\n    }\n\n    setState({\n      ...state,\n      activeIndex: activeIndex - 1,\n      translate: (activeIndex - 1) * getWidth()\n    })\n  }\n\nconst smoothTransition = () => {\n  let _slides = []\n\n  // We're at the last slide.\n  if (activeSlide === slides.length - 1)\n    _slides = [slides[slides.length - 2], lastSlide, firstSlide]\n  // We're back at the first slide. Just reset to how it was on initial render\n  else if (activeSlide === 0) _slides = [lastSlide, firstSlide, secondSlide]\n  // Create an array of the previous last slide, and the next two slides that follow it.\n  else _slides = slides.slice(activeSlide - 1, activeSlide + 2)\n\n  setState({\n    ...state,\n    _slides,\n    transition: 0,\n    translate: getWidth()\n  })\n}\n\n  \n  \n  return (\n    <div css={SliderCSS}>\n      <SliderContent\n        translate={translate}\n        transition={transition}\n        width={getWidth() * props.slides.length}\n      >\n        {props.slides.map((slide, i) => (\n          <Slide key={slide + i} content={slide} />\n        ))}\n      </SliderContent>\n\n      <Arrow direction=\"left\" handleClick={prevSlide} />\n      <Arrow direction=\"right\" handleClick={nextSlide} />\n      <Dots slides={props.slides} activeIndex={activeIndex}/>\n    </div>\n  )\n}\n\nconst SliderCSS = css`\n  position: relative;\n  height: 60vh;\n  width: 85vw;\n  margin: 0 auto;\n  overflow: hidden;\n`\nexport default Slider"]},"metadata":{},"sourceType":"module"}