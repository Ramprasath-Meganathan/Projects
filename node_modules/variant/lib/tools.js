"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Enforce exhaustion of a union type by using this in the default case.
 * @param x
 * @param options
 */
function exhaust(x, options = { key: 'type', throw: false }) {
    // Should never be called. If it ever *does* happen to be called it'll dump the type string.
    // I find this to be a reasonable balance between avoiding data in the logs and providing
    // useful debugging info.
    const msg = `Switch does not handle all cases. Failed case:${x[options.key]}`;
    if (options.throw) {
        throw new Error(msg);
    }
}
exports.exhaust = exhaust;
function _set(func, data) {
    // remove T from inputs, add T to outputs
    return (input) => {
        const combined = Object.assign({}, data, input);
        return func(combined);
    };
}
function _default(func, data) {
    return (input) => {
        const combined = Object.assign({}, data, input);
        return func(combined);
    };
}
/**
 * Handles boilerplate with the most common function definiton.
 * Also provides a clean way of describing things in a record-like
 * way.
 *
 * const ItemOne = variant('ITEM_ONE', fields<{
 *     id: number;
 *     name: string;
 * }>());
 *
 * You can also use .set() to assign some elements of an interface. For example:
 *
 * interface Audited<T> extends T {
 *     createdDate: number; // millis
 * }
 *
 * @param defaults set some default values for the object. Note this does not remove
 */
function fields(defaults = {}) {
    return Object.assign((input) => (Object.assign(Object.assign({}, defaults), input)), {
        set(data) {
            return _set(this, data);
        },
        default(data) {
            return _default(this, data);
        },
    });
}
exports.fields = fields;
/**
 * FSA compliance.
 */
function payload() {
    return (payload) => ({ payload });
}
exports.payload = payload;
function property(key) {
    return () => (payload) => ({ [key]: payload });
}
exports.property = property;
function data(x) {
    return (override) => (Object.assign(Object.assign({}, x), (override != undefined && override)));
}
exports.data = data;
//# sourceMappingURL=tools.js.map