import { TypeNames, VariantOf } from '..';
export declare const Animal: {
    dog: import("../variant").VariantCreator<"dog", ((input: {
        name: string;
        favoriteBall?: string | undefined;
    }) => {
        name: string;
        favoriteBall?: string | undefined;
    }) & {
        set<D extends Partial<{
            name: string;
            favoriteBall?: string | undefined;
        }>>(this: (x: {
            name: string;
            favoriteBall?: string | undefined;
        }) => {
            name: string;
            favoriteBall?: string | undefined;
        }, data: D): (input: { [P in keyof Pick<{
            name: string;
            favoriteBall?: string | undefined;
        }, Exclude<"name", keyof D> | Exclude<"favoriteBall", keyof D>>]: Pick<{
            name: string;
            favoriteBall?: string | undefined;
        }, Exclude<"name", keyof D> | Exclude<"favoriteBall", keyof D>>[P]; }) => { [P_1 in keyof ({
            name: string;
            favoriteBall?: string | undefined;
        } & D)]: ({
            name: string;
            favoriteBall?: string | undefined;
        } & D)[P_1]; };
        default<D_1>(this: (x: {
            name: string;
            favoriteBall?: string | undefined;
        }) => {
            name: string;
            favoriteBall?: string | undefined;
        }, data: D_1): (input: {
            name: "name" extends keyof D_1 ? {
                name: string;
                favoriteBall?: string | undefined;
            }[keyof D_1 & "name"] | undefined : string;
            favoriteBall?: ("favoriteBall" extends keyof D_1 ? {
                name: string;
                favoriteBall?: string | undefined;
            }[keyof D_1 & "favoriteBall"] | undefined : string | undefined) | undefined;
        }) => {
            name: string;
            favoriteBall?: string | undefined;
        };
    }, "type">;
    cat: import("../variant").VariantCreator<"cat", ((input: {
        name: string;
        daysSinceDamage: number;
    }) => {
        name: string;
        daysSinceDamage: number;
    }) & {
        set<D_2 extends Partial<{
            name: string;
            daysSinceDamage: number;
        }>>(this: (x: {
            name: string;
            daysSinceDamage: number;
        }) => {
            name: string;
            daysSinceDamage: number;
        }, data: D_2): (input: { [P_2 in keyof Pick<{
            name: string;
            daysSinceDamage: number;
        }, Exclude<"name", keyof D_2> | Exclude<"daysSinceDamage", keyof D_2>>]: Pick<{
            name: string;
            daysSinceDamage: number;
        }, Exclude<"name", keyof D_2> | Exclude<"daysSinceDamage", keyof D_2>>[P_2]; }) => { [P_3 in keyof ({
            name: string;
            daysSinceDamage: number;
        } & D_2)]: ({
            name: string;
            daysSinceDamage: number;
        } & D_2)[P_3]; };
        default<D_3>(this: (x: {
            name: string;
            daysSinceDamage: number;
        }) => {
            name: string;
            daysSinceDamage: number;
        }, data: D_3): (input: {
            name: "name" extends keyof D_3 ? {
                name: string;
                daysSinceDamage: number;
            }[keyof D_3 & "name"] | undefined : string;
            daysSinceDamage: "daysSinceDamage" extends keyof D_3 ? {
                name: string;
                daysSinceDamage: number;
            }[keyof D_3 & "daysSinceDamage"] | undefined : number;
        }) => {
            name: string;
            daysSinceDamage: number;
        };
    }, "type">;
    snake: import("../variant").VariantCreator<"snake", (name: string, patternName?: string | undefined) => {
        name: string;
        pattern: string;
    }, "type">;
};
export declare type Animal<T extends TypeNames<typeof Animal> = undefined> = VariantOf<typeof Animal, T>;
export declare const cerberus: {
    type: "dog";
    name: string;
    favoriteBall?: string | undefined;
};
//# sourceMappingURL=animal.d.ts.map